<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace="BoardMapper">
	<!--  게시물 등록, 줄바꿈할떈 공백입력후 줄바꿈, value에는 vo의 속성값넣음(여기선 이름이 둘다 같음) -->
	
	<!--  DB컬럼과 VO필드명이 다른 경우 처리 방법 -->
	
	<!--   mybatis config에서 BoardVO 수정전에 사용하는 type -->
	<!-- <resultMap id="BoardResultMap" type="com.spring.myapp.board.model.BoardVO"> -->
	<resultMap id="BoardResultMap" type="BoardVO">
		<id property="boardNo" column="board_no" />
		<result property="title" column="title" />
		<result property="content" column="content" />
		<result property="writer" column="writer" />
		<result property="regDate" column="reg_date" />
		<result property="viewCnt" column="view_cnt" />
		<result property="replyCnt" column="reply_cnt" />
		
	</resultMap>
	
	<!-- 게시물 등록 -->
	<insert id="insert">
		INSERT INTO mvc_board (title, content, writer) 
		VALUES (#{title}, #{content}, #{writer}) 
	</insert>
	
	<!--  단일 게시물 조회 -->
	<select id="getArticle" resultMap="BoardResultMap">
		SELECT * FROM mvc_board 
		WHERE board_no = #{boardNo}
	
	</select>
	
	<!--  게시물 업데이트 -->
	<update id="update">
		UPDATE mvc_board 
		SET title = #{title}, content = #{content} 
		WHERE board_no = #{boardNo}
	
	</update>
	
	<!--  게시물 삭제 -->
	<delete id="delete">
		DELETE FROM mvc_board WHERE board_no = #{boardNo}
	</delete>
	
	<!--  모든 게시물 조회 -->
	<!--
		 xml에서 SQL구문 작성시 연산자기호와 문자열을 구분할 수 없을 경우
		 <![CDATA[]]> 구문 안에 SQL을 작성하면 연산자 기호를 문자열로 처리할 수 잇습니다
		 -->
	<select id="getAllArticles" resultMap = "BoardResultMap">
		<![CDATA[
		SELECT * FROM mvc_board 
		WHERE board_no > 0 
		ORDER BY board_no DESC
		]]>
	</select>
	
	<!--  페이지별 게시물 조회  -->
	<!--  get이 있어야 관례적인 법칙으로 자동으로 찾을수있음. #{pageStart}에서 자동으로 get불러옴 -->
	<select id = "listPaging" resultMap="BoardResultMap">
		SELECT * FROM mvc_board 
		ORDER BY board_no DESC 
		LIMIT #{pageStart}, #{countPerPage}
	
	
	</select>
	
	<!--  총 게시물 수 불러오기 -->
	<select id="countArticles" resultType="int">
		SELECT COUNT(board_no) 
		FROM mvc_board;
	</select>
	
	<!--  검색된 게시물 수를 가져오기 -->
	<select id="countSearchedArticles" resultType="int">
		SELECT COUNT(*) 
		FROM mvc_board 
		<include refid="search" />
	</select>
	
	
	
	<!--  검색된 게시물 목록 조회처리 -->
	<select id="listSearch" resultMap="BoardResultMap">
		SELECT * 
		FROM mvc_board 
		
		<include refid="search"/>
		
		
		ORDER BY board_no DESC 
		LIMIT #{pageStart}, #{countPerPage}
	</select>
	
	<!--  중복되는 동적 sql구문 처리 -->
	
	<sql id="search">
		<if test="condition != '' ">	
			<!--  동적sql구문 -->
			<if test="condition == 'title'">
			WHERE title LIKE CONCAT('%', #{keyword}, '%') 
			</if>		
			<if test="condition == 'writer'">
			WHERE writer LIKE CONCAT('%', #{keyword}, '%') 
			</if>
			<if test="condition == 'content'">
			WHERE content LIKE CONCAT('%', #{keyword}, '%') 
			</if>
		</if>
	</sql>
		
	<!--  조회수 상승 sql -->
	<update id="updateViewCnt">
		UPDATE mvc_board 
		SET view_cnt = view_cnt + 1 
		WHERE board_no = #{boardNo}
		
	</update>
	
	<!--  댓글 수 수정 SQL -->
	<update id="updateReplyCnt">
		UPDATE mvc_board 
		SET reply_cnt = reply_cnt + #{count} 
		WHERE board_no = #{boardNo}
	</update>	
	

	<!--  복잡해서 안쓰는 가져오기 방법들 -->
	<!--  제목으로 검색한 게시물 목록 가져오기  -->
	<select id="listSearchByTitle" resultMap="BoardResultMap">
		SELECT * 
		FROM mvc_board 
		WHERE title LIKE CONCAT('%', #{keyword}, '%') 
		ORDER BY board_no DESC 
		LIMIT #{pageStart}, #{countPerPage}
	</select>	
	<!--  작성자명으로 검색한 게시물 목록 가져오기  -->
	<select id="listSearchByWriter" resultMap="BoardResultMap">
		SELECT * 
		FROM mvc_board 
		WHERE writer LIKE CONCAT('%', #{keyword}, '%') 
		ORDER BY board_no DESC 
		LIMIT #{pageStart}, #{countPerPage}
	</select>
	

	
</mapper>